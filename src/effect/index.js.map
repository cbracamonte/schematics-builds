{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../modules/schematics/src/effect/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  Rule,\r\n  SchematicContext,\r\n  SchematicsException,\r\n  Tree,\r\n  apply,\r\n  applyTemplates,\r\n  branchAndMerge,\r\n  chain,\r\n  filter,\r\n  mergeWith,\r\n  move,\r\n  noop,\r\n  url,\r\n} from '@angular-devkit/schematics';\r\nimport {\r\n  InsertChange,\r\n  addImportToModule,\r\n  buildRelativePath,\r\n  findModuleFromOptions,\r\n  getProjectPath,\r\n  insertImport,\r\n  parseName,\r\n  stringUtils,\r\n} from '@ngrx/schematics/schematics-core';\r\nimport * as ts from 'typescript';\r\nimport { Schema as EffectOptions } from './schema';\r\n\r\nfunction addImportToNgModule(options: EffectOptions): Rule {\r\n  return (host: Tree) => {\r\n    const modulePath = options.module;\r\n\r\n    if (!modulePath) {\r\n      return host;\r\n    }\r\n\r\n    if (!host.exists(modulePath)) {\r\n      throw new Error(`Specified module path ${modulePath} does not exist`);\r\n    }\r\n\r\n    const text = host.read(modulePath);\r\n    if (text === null) {\r\n      throw new SchematicsException(`File ${modulePath} does not exist.`);\r\n    }\r\n    const sourceText = text.toString('utf-8');\r\n\r\n    const source = ts.createSourceFile(\r\n      modulePath,\r\n      sourceText,\r\n      ts.ScriptTarget.Latest,\r\n      true\r\n    );\r\n\r\n    const effectsName = `${stringUtils.classify(`${options.name}Effects`)}`;\r\n\r\n    const effectsModuleImport = insertImport(\r\n      source,\r\n      modulePath,\r\n      'EffectsModule',\r\n      '@ngrx/effects'\r\n    );\r\n\r\n    const effectsPath =\r\n      `/${options.path}/` +\r\n      (options.flat ? '' : stringUtils.dasherize(options.name) + '/') +\r\n      (options.group ? 'effects/' : '') +\r\n      stringUtils.dasherize(options.name) +\r\n      '.effects';\r\n    const relativePath = buildRelativePath(modulePath, effectsPath);\r\n    const effectsImport = insertImport(\r\n      source,\r\n      modulePath,\r\n      effectsName,\r\n      relativePath\r\n    );\r\n\r\n    const effectsSetup =\r\n      options.root && options.minimal ? `[]` : `[${effectsName}]`;\r\n    const [effectsNgModuleImport] = addImportToModule(\r\n      source,\r\n      modulePath,\r\n      `EffectsModule.for${options.root ? 'Root' : 'Feature'}(${effectsSetup})`,\r\n      relativePath\r\n    );\r\n\r\n    let changes = [effectsModuleImport, effectsNgModuleImport];\r\n\r\n    if (!options.root || (options.root && !options.minimal)) {\r\n      changes = changes.concat([effectsImport]);\r\n    }\r\n\r\n    const recorder = host.beginUpdate(modulePath);\r\n    for (const change of changes) {\r\n      if (change instanceof InsertChange) {\r\n        recorder.insertLeft(change.pos, change.toAdd);\r\n      }\r\n    }\r\n    host.commitUpdate(recorder);\r\n\r\n    return host;\r\n  };\r\n}\r\n\r\nfunction getEffectMethod(creators?: boolean) {\r\n  return creators ? 'createEffect' : 'Effect';\r\n}\r\n\r\nfunction getEffectStart(name: string, creators?: boolean): string {\r\n  const effectName = stringUtils.classify(name);\r\n  return creators\r\n    ? `load${effectName}s$ = createEffect(() => {` +\r\n        '\\n    return this.actions$.pipe( \\n'\r\n    : '@Effect()\\n' + `  load${effectName}s$ = this.actions$.pipe(`;\r\n}\r\n\r\nfunction getEffectEnd(creators?: boolean) {\r\n  return creators ? '  );\\n' + '  });' : ');';\r\n}\r\n\r\nexport default function (options: EffectOptions): Rule {\r\n  return (host: Tree, context: SchematicContext) => {\r\n    options.path = getProjectPath(host, options);\r\n\r\n    if (options.module) {\r\n      options.module = findModuleFromOptions(host, options);\r\n    }\r\n\r\n    const parsedPath = parseName(options.path, options.name || '');\r\n    options.name = parsedPath.name;\r\n    options.path = parsedPath.path;\r\n\r\n    const templateSource = apply(url('./files'), [\r\n      options.skipTests\r\n        ? filter((path) => !path.endsWith('.spec.ts.template'))\r\n        : noop(),\r\n      options.root && options.minimal ? filter((_) => false) : noop(),\r\n      applyTemplates({\r\n        ...stringUtils,\r\n        'if-flat': (s: string) =>\r\n          stringUtils.group(\r\n            options.flat ? '' : s,\r\n            options.group ? 'effects' : ''\r\n          ),\r\n        effectMethod: getEffectMethod(options.creators),\r\n        effectStart: getEffectStart(options.name, options.creators),\r\n        effectEnd: getEffectEnd(options.creators),\r\n        ...(options as object),\r\n      } as any),\r\n      move(parsedPath.path),\r\n    ]);\r\n\r\n    return chain([\r\n      branchAndMerge(\r\n        chain([addImportToNgModule(options), mergeWith(templateSource)])\r\n      ),\r\n    ])(host, context);\r\n  };\r\n}\r\n"]}