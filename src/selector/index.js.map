{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../modules/schematics/src/selector/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,yDAaoC;AACpC,oEAI0C;AAG1C,mBAAyB,OAAwB;IAC/C,OAAO,UAAC,IAAU,EAAE,OAAyB;QAC3C,OAAO,CAAC,IAAI,GAAG,gCAAc,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAE7C,IAAM,UAAU,GAAG,2BAAS,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;QAC/D,OAAO,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;QAC/B,OAAO,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;QAE/B,IAAM,cAAc,GAAG,kBAAK,CAAC,gBAAG,CAAC,SAAS,CAAC,EAAE;YAC3C,OAAO,CAAC,SAAS;gBACf,CAAC,CAAC,mBAAM,CAAC,UAAC,IAAI,IAAK,OAAA,CAAC,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,EAAnC,CAAmC,CAAC;gBACvD,CAAC,CAAC,iBAAI,EAAE;YACV,2BAAc,CAAC,+BACV,6BAAW,KACd,SAAS,EAAE,UAAC,CAAS;oBACnB,OAAA,6BAAW,CAAC,KAAK,CACf,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EACrB,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CACjC;gBAHD,CAGC,EACH,WAAW,EAAE,KAAG,YAAY,CAAC,OAAO,CAAC,GAAG,6BAAW,CAAC,SAAS,CAC3D,OAAO,CAAC,IAAI,CACb,aAAU,KACP,OAAkB,CAChB,CAAC;YACT,iBAAI,CAAC,UAAU,CAAC,IAAI,CAAC;SACtB,CAAC,CAAC;QAEH,OAAO,kBAAK,CAAC,CAAC,2BAAc,CAAC,kBAAK,CAAC,CAAC,sBAAS,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAChE,IAAI,EACJ,OAAO,CACR,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC;AAhCD,+BAgCC;AAED,SAAS,YAAY,CAAC,OAAwB;IAC5C,IAAI,OAAO,CAAC,OAAO,EAAE;QACnB,OAAO,6BAAW,CAAC,WAAW,CAC5B,OAAO,CAAC,KAAK,EACb,OAAO,CAAC,IAAI,EACZ,UAAU,EACV,6BAAW,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CACpC,CAAC;KACH;IAED,OAAO,EAAE,CAAC;AACZ,CAAC","sourcesContent":["import {\r\n  Rule,\r\n  SchematicContext,\r\n  Tree,\r\n  apply,\r\n  applyTemplates,\r\n  branchAndMerge,\r\n  chain,\r\n  filter,\r\n  mergeWith,\r\n  move,\r\n  noop,\r\n  url,\r\n} from '@angular-devkit/schematics';\r\nimport {\r\n  getProjectPath,\r\n  parseName,\r\n  stringUtils,\r\n} from '@ngrx/schematics/schematics-core';\r\nimport { Schema as SelectorOptions } from './schema';\r\n\r\nexport default function (options: SelectorOptions): Rule {\r\n  return (host: Tree, context: SchematicContext) => {\r\n    options.path = getProjectPath(host, options);\r\n\r\n    const parsedPath = parseName(options.path, options.name || '');\r\n    options.name = parsedPath.name;\r\n    options.path = parsedPath.path;\r\n\r\n    const templateSource = apply(url('./files'), [\r\n      options.skipTests\r\n        ? filter((path) => !path.endsWith('.spec.ts.template'))\r\n        : noop(),\r\n      applyTemplates({\r\n        ...stringUtils,\r\n        'if-flat': (s: string) =>\r\n          stringUtils.group(\r\n            options.flat ? '' : s,\r\n            options.group ? 'selectors' : ''\r\n          ),\r\n        reducerPath: `${relativePath(options)}${stringUtils.dasherize(\r\n          options.name\r\n        )}.reducer`,\r\n        ...(options as object),\r\n      } as any),\r\n      move(parsedPath.path),\r\n    ]);\r\n\r\n    return chain([branchAndMerge(chain([mergeWith(templateSource)]))])(\r\n      host,\r\n      context\r\n    );\r\n  };\r\n}\r\n\r\nfunction relativePath(options: SelectorOptions) {\r\n  if (options.feature) {\r\n    return stringUtils.featurePath(\r\n      options.group,\r\n      options.flat,\r\n      'reducers',\r\n      stringUtils.dasherize(options.name)\r\n    );\r\n  }\r\n\r\n  return '';\r\n}\r\n"]}