{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../modules/schematics/src/store/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yDAeoC;AACpC,6CAAqD;AACrD,+BAAiC;AACjC,oEAY0C;AAG1C,SAAS,mBAAmB,CAAC,OAAqB;IAChD,OAAO,UAAC,IAAU;;QAChB,IAAM,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC;QAElC,IAAI,CAAC,UAAU,EAAE;YACf,OAAO,IAAI,CAAC;SACb;QAED,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE;YAC5B,MAAM,IAAI,KAAK,CAAC,2BAAyB,UAAU,oBAAiB,CAAC,CAAC;SACvE;QAED,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACnC,IAAI,IAAI,KAAK,IAAI,EAAE;YACjB,MAAM,IAAI,gCAAmB,CAAC,UAAQ,UAAU,qBAAkB,CAAC,CAAC;SACrE;QACD,IAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAE1C,IAAM,MAAM,GAAG,EAAE,CAAC,gBAAgB,CAChC,UAAU,EACV,UAAU,EACV,EAAE,CAAC,YAAY,CAAC,MAAM,EACtB,IAAI,CACL,CAAC;QAEF,IAAM,SAAS,GAAM,OAAO,CAAC,IAAI,SAAI,OAAO,CAAC,SAAW,CAAC;QACzD,IAAM,YAAY,GAAG,mCAAiB,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QAE9D,IAAM,gBAAgB,GAAG,mCAAiB,CACxC,SAAS,EACN,OAAO,CAAC,IAAI,8BAA2B,CAC3C,CAAC;QAEF,IAAM,iBAAiB,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC;QAC9D,IAAM,eAAe,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,oBAAoB,CAAC;QAEpE,IAAM,mBAAmB,GAAG,mCAAiB,CAC3C,MAAM,EACN,UAAU,EACV,OAAO,CAAC,IAAI;YACV,CAAC,CAAC,yBAAuB,iBAAiB,GAAG,eAAe,MAAG;YAC/D,CAAC,CAAC,gCAA8B,6BAAW,CAAC,QAAQ,CAChD,OAAO,CAAC,IAAI,CACb,SAAI,6BAAW,CAAC,QAAQ,CACvB,OAAO,CAAC,IAAI,CACb,wBAAmB,6BAAW,CAAC,QAAQ,CACtC,OAAO,CAAC,IAAI,CACb,uCAAkC,6BAAW,CAAC,QAAQ,CACrD,OAAO,CAAC,IAAI,CACb,qBAAkB,EACvB,YAAY,CACb,CAAC,KAAK,EAAE,CAAC;QAEV,IAAI,aAAa,GAAG;YAClB,8BAAY,CAAC,MAAM,EAAE,UAAU,EAAE,aAAa,EAAE,aAAa,CAAC;YAC9D,mBAAmB;SACpB,CAAC;QAEF,IAAI,OAAO,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;YACpC,aAAa,GAAG,aAAa,CAAC,MAAM,CAAC;gBACnC,8BAAY,CACV,MAAM,EACN,UAAU,EACV,wBAAwB,EACxB,YAAY,CACb;aACF,CAAC,CAAC;SACJ;aAAM,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;YACxB,aAAa,GAAG,aAAa,CAAC,MAAM,CAAC;gBACnC,8BAAY,CACV,MAAM,EACN,UAAU,EACV,cAAY,6BAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAG,EAChD,YAAY,EACZ,IAAI,CACL;aACF,CAAC,CAAC;SACJ;QAED,IAAI,WAAW,GAA2B,EAAE,CAAC;QAE7C,IAAI,OAAO,CAAC,IAAI,EAAE;YAChB,IAAI,YAAU,GAAG,KAAK,CAAC;YACvB,sCAAoB,CAAC,MAAM,EAAE,UAAC,CAAC,EAAE,WAAW;gBAC1C,YAAU,GAAG,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;YACtC,CAAC,CAAC,CAAC;YAEH,qFAAqF;YACrF,wGAAwG;YACxG,oDAAoD;YACpD,IAAI,cAAc,GAAG,YAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;YAE5C,IAAM,2BAA2B,GAAG,mCAAiB,CACnD,MAAM,EACN,UAAU,EACP,cAAc,oEAAiE,EAClF,YAAY,CACb,CAAC,KAAK,EAAE,CAAC;YAEV,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC;gBAC/B,8BAAY,CACV,MAAM,EACN,UAAU,EACV,qBAAqB,EACrB,sBAAsB,CACvB;gBACD,8BAAY,CAAC,MAAM,EAAE,UAAU,EAAE,aAAa,EAAE,gBAAgB,CAAC;gBACjE,2BAA2B;aAC5B,CAAC,CAAC;SACJ;QAED,IAAM,OAAO,YAAO,aAAa,EAAK,WAAW,CAAC,CAAC;QACnD,IAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;;YAC9C,KAAqB,IAAA,YAAA,SAAA,OAAO,CAAA,gCAAA,qDAAE;gBAAzB,IAAM,MAAM,oBAAA;gBACf,IAAI,MAAM,YAAY,8BAAY,EAAE;oBAClC,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;iBAC/C;aACF;;;;;;;;;QACD,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAE5B,OAAO,IAAI,CAAC;IACd,CAAC,CAAC;AACJ,CAAC;AAED,mBAAyB,OAAqB;IAC5C,OAAO,UAAC,IAAU,EAAE,OAAyB;QAC3C,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;YAClC,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;SAChE;QAED,OAAO,CAAC,IAAI,GAAG,gCAAc,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAE7C,IAAM,UAAU,GAAG,2BAAS,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;QAC/D,OAAO,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;QAC/B,OAAO,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;QAE/B,IAAM,SAAS,GAAG,MAAI,OAAO,CAAC,IAAI,SAAI,OAAO,CAAC,SAAS,cAAW,CAAC;QACnE,IAAM,OAAO,GAAG,cAAO,CAAC,OAAO,CAAC,IAAY,CAAC,CAAC;QAC9C,IAAM,gBAAgB,GAAG,mCAAiB,CACxC,SAAS,EACN,OAAO,8BAA2B,CACtC,CAAC;QAEF,IAAI,OAAO,CAAC,MAAM,EAAE;YAClB,OAAO,CAAC,MAAM,GAAG,uCAAqB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;SACvD;QAED,IACE,OAAO,CAAC,IAAI;YACZ,OAAO,CAAC,cAAc;YACtB,OAAO,CAAC,cAAc,KAAK,OAAO,EAClC;YACA,OAAO,CAAC,cAAc,GAAG,6BAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;SACvE;QAED,IAAM,cAAc,GAAG,kBAAK,CAAC,gBAAG,CAAC,SAAS,CAAC,EAAE;YAC3C,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,mBAAM,CAAC,UAAC,CAAC,IAAK,OAAA,KAAK,EAAL,CAAK,CAAC,CAAC,CAAC,CAAC,iBAAI,EAAE;YAC/D,2BAAc,gCACT,6BAAW,GACV,OAAkB,KACtB,KAAK,EAAE,uBAAK,CAAC,IAAI,EAAE,OAAO,CAAC,EAC3B,gBAAgB,kBAAA,IAChB;YACF,iBAAI,CAAC,UAAU,CAAC,IAAI,CAAC;SACtB,CAAC,CAAC;QAEH,OAAO,kBAAK,CAAC;YACX,2BAAc,CACZ,kBAAK,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC,EAAE,sBAAS,CAAC,cAAc,CAAC,CAAC,CAAC,CACjE;SACF,CAAC,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACpB,CAAC,CAAC;AACJ,CAAC;AAhDD,+BAgDC","sourcesContent":["import {\r\n  Rule,\r\n  SchematicContext,\r\n  SchematicsException,\r\n  Tree,\r\n  apply,\r\n  applyTemplates,\r\n  branchAndMerge,\r\n  chain,\r\n  mergeWith,\r\n  template,\r\n  url,\r\n  move,\r\n  filter,\r\n  noop,\r\n} from '@angular-devkit/schematics';\r\nimport { Path, dirname } from '@angular-devkit/core';\r\nimport * as ts from 'typescript';\r\nimport {\r\n  stringUtils,\r\n  buildRelativePath,\r\n  insertImport,\r\n  Change,\r\n  InsertChange,\r\n  getProjectPath,\r\n  isLib,\r\n  findModuleFromOptions,\r\n  addImportToModule,\r\n  parseName,\r\n  visitNgModuleImports,\r\n} from '@ngrx/schematics/schematics-core';\r\nimport { Schema as StoreOptions } from './schema';\r\n\r\nfunction addImportToNgModule(options: StoreOptions): Rule {\r\n  return (host: Tree) => {\r\n    const modulePath = options.module;\r\n\r\n    if (!modulePath) {\r\n      return host;\r\n    }\r\n\r\n    if (!host.exists(modulePath)) {\r\n      throw new Error(`Specified module path ${modulePath} does not exist`);\r\n    }\r\n\r\n    const text = host.read(modulePath);\r\n    if (text === null) {\r\n      throw new SchematicsException(`File ${modulePath} does not exist.`);\r\n    }\r\n    const sourceText = text.toString('utf-8');\r\n\r\n    const source = ts.createSourceFile(\r\n      modulePath,\r\n      sourceText,\r\n      ts.ScriptTarget.Latest,\r\n      true\r\n    );\r\n\r\n    const statePath = `${options.path}/${options.statePath}`;\r\n    const relativePath = buildRelativePath(modulePath, statePath);\r\n\r\n    const environmentsPath = buildRelativePath(\r\n      statePath,\r\n      `${options.path}/environments/environment`\r\n    );\r\n\r\n    const rootStoreReducers = options.minimal ? `{}` : `reducers`;\r\n    const rootStoreConfig = options.minimal ? `` : `, { metaReducers }`;\r\n\r\n    const storeNgModuleImport = addImportToModule(\r\n      source,\r\n      modulePath,\r\n      options.root\r\n        ? `StoreModule.forRoot(${rootStoreReducers}${rootStoreConfig})`\r\n        : `StoreModule.forFeature(from${stringUtils.classify(\r\n            options.name\r\n          )}.${stringUtils.camelize(\r\n            options.name\r\n          )}FeatureKey, from${stringUtils.classify(\r\n            options.name\r\n          )}.reducers, { metaReducers: from${stringUtils.classify(\r\n            options.name\r\n          )}.metaReducers })`,\r\n      relativePath\r\n    ).shift();\r\n\r\n    let commonImports = [\r\n      insertImport(source, modulePath, 'StoreModule', '@ngrx/store'),\r\n      storeNgModuleImport,\r\n    ];\r\n\r\n    if (options.root && !options.minimal) {\r\n      commonImports = commonImports.concat([\r\n        insertImport(\r\n          source,\r\n          modulePath,\r\n          'reducers, metaReducers',\r\n          relativePath\r\n        ),\r\n      ]);\r\n    } else if (!options.root) {\r\n      commonImports = commonImports.concat([\r\n        insertImport(\r\n          source,\r\n          modulePath,\r\n          `* as from${stringUtils.classify(options.name)}`,\r\n          relativePath,\r\n          true\r\n        ),\r\n      ]);\r\n    }\r\n\r\n    let rootImports: (Change | undefined)[] = [];\r\n\r\n    if (options.root) {\r\n      let hasImports = false;\r\n      visitNgModuleImports(source, (_, importNodes) => {\r\n        hasImports = importNodes.length > 0;\r\n      });\r\n\r\n      // `addImportToModule` adds a comma to imports when there are already imports present\r\n      // because at this time the store import hasn't been committed yet, `addImportToModule` wont add a comma\r\n      // so we have to add it here for empty import arrays\r\n      let adjectiveComma = hasImports ? '' : ', ';\r\n\r\n      const storeDevtoolsNgModuleImport = addImportToModule(\r\n        source,\r\n        modulePath,\r\n        `${adjectiveComma}!environment.production ? StoreDevtoolsModule.instrument() : []`,\r\n        relativePath\r\n      ).shift();\r\n\r\n      rootImports = rootImports.concat([\r\n        insertImport(\r\n          source,\r\n          modulePath,\r\n          'StoreDevtoolsModule',\r\n          '@ngrx/store-devtools'\r\n        ),\r\n        insertImport(source, modulePath, 'environment', environmentsPath),\r\n        storeDevtoolsNgModuleImport,\r\n      ]);\r\n    }\r\n\r\n    const changes = [...commonImports, ...rootImports];\r\n    const recorder = host.beginUpdate(modulePath);\r\n    for (const change of changes) {\r\n      if (change instanceof InsertChange) {\r\n        recorder.insertLeft(change.pos, change.toAdd);\r\n      }\r\n    }\r\n    host.commitUpdate(recorder);\r\n\r\n    return host;\r\n  };\r\n}\r\n\r\nexport default function (options: StoreOptions): Rule {\r\n  return (host: Tree, context: SchematicContext) => {\r\n    if (!options.name && !options.root) {\r\n      throw new Error(`Please provide a name for the feature state`);\r\n    }\r\n\r\n    options.path = getProjectPath(host, options);\r\n\r\n    const parsedPath = parseName(options.path, options.name || '');\r\n    options.name = parsedPath.name;\r\n    options.path = parsedPath.path;\r\n\r\n    const statePath = `/${options.path}/${options.statePath}/index.ts`;\r\n    const srcPath = dirname(options.path as Path);\r\n    const environmentsPath = buildRelativePath(\r\n      statePath,\r\n      `${srcPath}/environments/environment`\r\n    );\r\n\r\n    if (options.module) {\r\n      options.module = findModuleFromOptions(host, options);\r\n    }\r\n\r\n    if (\r\n      options.root &&\r\n      options.stateInterface &&\r\n      options.stateInterface !== 'State'\r\n    ) {\r\n      options.stateInterface = stringUtils.classify(options.stateInterface);\r\n    }\r\n\r\n    const templateSource = apply(url('./files'), [\r\n      options.root && options.minimal ? filter((_) => false) : noop(),\r\n      applyTemplates({\r\n        ...stringUtils,\r\n        ...(options as object),\r\n        isLib: isLib(host, options),\r\n        environmentsPath,\r\n      }),\r\n      move(parsedPath.path),\r\n    ]);\r\n\r\n    return chain([\r\n      branchAndMerge(\r\n        chain([addImportToNgModule(options), mergeWith(templateSource)])\r\n      ),\r\n    ])(host, context);\r\n  };\r\n}\r\n"]}