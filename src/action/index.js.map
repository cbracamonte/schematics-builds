{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../modules/schematics/src/action/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,yDAeoC;AAEpC,oEAI0C;AAE1C,mBAAyB,OAAsB;IAC7C,OAAO,UAAC,IAAU,EAAE,OAAyB;QAC3C,OAAO,CAAC,IAAI,GAAG,gCAAc,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAE7C,IAAM,UAAU,GAAG,2BAAS,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;QACzD,OAAO,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;QAC/B,OAAO,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;QAE/B,IAAM,cAAc,GAAG,kBAAK,CAC1B,gBAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,SAAS,CAAC,EACrD;YACE,OAAO,CAAC,SAAS;gBACf,CAAC,CAAC,mBAAM,CAAC,UAAC,IAAI,IAAK,OAAA,CAAC,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,EAAnC,CAAmC,CAAC;gBACvD,CAAC,CAAC,iBAAI,EAAE;YACV,2BAAc,gCACT,6BAAW,KACd,SAAS,EAAE,UAAC,CAAS;oBACnB,OAAA,6BAAW,CAAC,KAAK,CACf,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EACrB,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAC/B;gBAHD,CAGC,KACA,OAAO,EACV;YACF,iBAAI,CAAC,UAAU,CAAC,IAAI,CAAC;SACtB,CACF,CAAC;QAEF,OAAO,kBAAK,CAAC,CAAC,2BAAc,CAAC,kBAAK,CAAC,CAAC,sBAAS,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAChE,IAAI,EACJ,OAAO,CACR,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC;AAhCD,+BAgCC","sourcesContent":["import {\r\n  Rule,\r\n  SchematicsException,\r\n  apply,\r\n  applyTemplates,\r\n  branchAndMerge,\r\n  chain,\r\n  filter,\r\n  mergeWith,\r\n  move,\r\n  noop,\r\n  template,\r\n  url,\r\n  Tree,\r\n  SchematicContext,\r\n} from '@angular-devkit/schematics';\r\nimport { Schema as ActionOptions } from './schema';\r\nimport {\r\n  getProjectPath,\r\n  stringUtils,\r\n  parseName,\r\n} from '@ngrx/schematics/schematics-core';\r\n\r\nexport default function (options: ActionOptions): Rule {\r\n  return (host: Tree, context: SchematicContext) => {\r\n    options.path = getProjectPath(host, options);\r\n\r\n    const parsedPath = parseName(options.path, options.name);\r\n    options.name = parsedPath.name;\r\n    options.path = parsedPath.path;\r\n\r\n    const templateSource = apply(\r\n      url(options.creators ? './creator-files' : './files'),\r\n      [\r\n        options.skipTests\r\n          ? filter((path) => !path.endsWith('.spec.ts.template'))\r\n          : noop(),\r\n        applyTemplates({\r\n          ...stringUtils,\r\n          'if-flat': (s: string) =>\r\n            stringUtils.group(\r\n              options.flat ? '' : s,\r\n              options.group ? 'actions' : ''\r\n            ),\r\n          ...options,\r\n        }),\r\n        move(parsedPath.path),\r\n      ]\r\n    );\r\n\r\n    return chain([branchAndMerge(chain([mergeWith(templateSource)]))])(\r\n      host,\r\n      context\r\n    );\r\n  };\r\n}\r\n"]}