{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../modules/schematics/src/container/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  Rule,\r\n  SchematicContext,\r\n  SchematicsException,\r\n  Tree,\r\n  chain,\r\n  externalSchematic,\r\n  apply,\r\n  applyTemplates,\r\n  url,\r\n  noop,\r\n  filter,\r\n  template,\r\n  move,\r\n  mergeWith,\r\n  MergeStrategy,\r\n} from '@angular-devkit/schematics';\r\nimport * as ts from 'typescript';\r\nimport {\r\n  stringUtils,\r\n  buildRelativePath,\r\n  insertImport,\r\n  NoopChange,\r\n  ReplaceChange,\r\n  InsertChange,\r\n  getProjectPath,\r\n  omit,\r\n  parseName,\r\n} from '@ngrx/schematics/schematics-core';\r\nimport { Schema as ContainerOptions } from './schema';\r\n\r\nfunction addStateToComponent(options: Partial<ContainerOptions>) {\r\n  return (host: Tree) => {\r\n    if (!options.state && !options.stateInterface) {\r\n      return host;\r\n    }\r\n\r\n    const statePath = `/${options.path}/${options.state}`;\r\n\r\n    if (options.state) {\r\n      if (!host.exists(statePath)) {\r\n        throw new Error(`The Specified state path ${statePath} does not exist`);\r\n      }\r\n    }\r\n\r\n    const componentPath =\r\n      `/${options.path}/` +\r\n      (options.flat ? '' : stringUtils.dasherize(options.name) + '/') +\r\n      stringUtils.dasherize(options.name) +\r\n      '.component.ts';\r\n\r\n    const text = host.read(componentPath);\r\n\r\n    if (text === null) {\r\n      throw new SchematicsException(`File ${componentPath} does not exist.`);\r\n    }\r\n\r\n    const sourceText = text.toString('utf-8');\r\n\r\n    const source = ts.createSourceFile(\r\n      componentPath,\r\n      sourceText,\r\n      ts.ScriptTarget.Latest,\r\n      true\r\n    );\r\n\r\n    const stateImportPath = buildRelativePath(componentPath, statePath);\r\n    const storeImport = insertImport(\r\n      source,\r\n      componentPath,\r\n      'Store',\r\n      '@ngrx/store'\r\n    );\r\n    const stateImport = options.state\r\n      ? insertImport(\r\n          source,\r\n          componentPath,\r\n          `* as fromStore`,\r\n          stateImportPath,\r\n          true\r\n        )\r\n      : new NoopChange();\r\n\r\n    const componentClass = source.statements.find(\r\n      (stm) => stm.kind === ts.SyntaxKind.ClassDeclaration\r\n    );\r\n    const component = componentClass as ts.ClassDeclaration;\r\n    const componentConstructor = component.members.find(\r\n      (member) => member.kind === ts.SyntaxKind.Constructor\r\n    );\r\n    const cmpCtr = componentConstructor as ts.ConstructorDeclaration;\r\n    const { pos } = cmpCtr;\r\n    const constructorText = cmpCtr.getText();\r\n    const [start, end] = constructorText.split('()');\r\n    const storeConstructor = [start, `(private store: Store)`, end].join('');\r\n    const constructorUpdate = new ReplaceChange(\r\n      componentPath,\r\n      pos,\r\n      `  ${constructorText}\\n\\n`,\r\n      `\\n\\n  ${storeConstructor}`\r\n    );\r\n\r\n    const changes = [storeImport, stateImport, constructorUpdate];\r\n    const recorder = host.beginUpdate(componentPath);\r\n\r\n    for (const change of changes) {\r\n      if (change instanceof InsertChange) {\r\n        recorder.insertLeft(change.pos, change.toAdd);\r\n      } else if (change instanceof ReplaceChange) {\r\n        recorder.remove(pos, change.oldText.length);\r\n        recorder.insertLeft(change.order, change.newText);\r\n      }\r\n    }\r\n\r\n    host.commitUpdate(recorder);\r\n\r\n    return host;\r\n  };\r\n}\r\n\r\nexport default function (options: ContainerOptions): Rule {\r\n  return (host: Tree, context: SchematicContext) => {\r\n    options.path = getProjectPath(host, options);\r\n\r\n    const parsedPath = parseName(options.path, options.name);\r\n    options.name = parsedPath.name;\r\n    options.path = parsedPath.path;\r\n\r\n    const opts = ['state', 'stateInterface'].reduce(\r\n      (current: Partial<ContainerOptions>, key) => {\r\n        return omit(current, key as any);\r\n      },\r\n      options\r\n    );\r\n\r\n    const templateSource = apply(\r\n      url(options.testDepth === 'unit' ? './files' : './integration-files'),\r\n      [\r\n        options.skipTests\r\n          ? filter((path) => !path.endsWith('.spec.ts.template'))\r\n          : noop(),\r\n        applyTemplates({\r\n          'if-flat': (s: string) => (options.flat ? '' : s),\r\n          ...stringUtils,\r\n          ...(options as object),\r\n        } as any),\r\n        move(parsedPath.path),\r\n      ]\r\n    );\r\n\r\n    // Remove all undefined values to use the schematic defaults (in angular.json or the Angular schema)\r\n    (Object.keys(opts) as (keyof ContainerOptions)[]).forEach((key) =>\r\n      opts[key] === undefined ? delete opts[key] : {}\r\n    );\r\n\r\n    return chain([\r\n      externalSchematic('@schematics/angular', 'component', {\r\n        ...opts,\r\n        skipTests: true,\r\n      }),\r\n      addStateToComponent(options),\r\n      mergeWith(templateSource),\r\n    ])(host, context);\r\n  };\r\n}\r\n"]}