{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../modules/schematics/src/create-effect-migration/index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\r\nimport { Path } from '@angular-devkit/core';\r\nimport { Tree, Rule, chain } from '@angular-devkit/schematics';\r\nimport {\r\n  InsertChange,\r\n  RemoveChange,\r\n  replaceImport,\r\n  commitChanges,\r\n  visitTSSourceFiles,\r\n} from '@ngrx/schematics/schematics-core';\r\n\r\nexport function migrateToCreators(): Rule {\r\n  return (tree: Tree) => {\r\n    visitTSSourceFiles(tree, (sourceFile) => {\r\n      const effectsPerClass = sourceFile.statements\r\n        .filter(ts.isClassDeclaration)\r\n        .map((clas) =>\r\n          clas.members\r\n            .filter(ts.isPropertyDeclaration)\r\n            .filter(\r\n              (property) =>\r\n                property.decorators &&\r\n                property.decorators.some(isEffectDecorator)\r\n            )\r\n        );\r\n\r\n      const effects = effectsPerClass.reduce(\r\n        (acc, effects) => acc.concat(effects),\r\n        []\r\n      );\r\n\r\n      const createEffectsChanges = replaceEffectDecorators(\r\n        tree,\r\n        sourceFile,\r\n        effects\r\n      );\r\n      const importChanges = replaceImport(\r\n        sourceFile,\r\n        sourceFile.fileName as Path,\r\n        '@ngrx/effects',\r\n        'Effect',\r\n        'createEffect'\r\n      );\r\n\r\n      commitChanges(tree, sourceFile.fileName, [\r\n        ...importChanges,\r\n        ...createEffectsChanges,\r\n      ]);\r\n    });\r\n  };\r\n}\r\n\r\nfunction replaceEffectDecorators(\r\n  host: Tree,\r\n  sourceFile: ts.SourceFile,\r\n  effects: ts.PropertyDeclaration[]\r\n) {\r\n  const inserts = effects\r\n    .filter((effect) => !!effect.initializer)\r\n    .map((effect) => {\r\n      const decorator = (effect.decorators || []).find(isEffectDecorator)!;\r\n      const effectArguments = getDispatchProperties(\r\n        host,\r\n        sourceFile.text,\r\n        decorator\r\n      );\r\n      const end = effectArguments ? `, ${effectArguments})` : ')';\r\n\r\n      return [\r\n        new InsertChange(\r\n          sourceFile.fileName,\r\n          effect.initializer!.pos,\r\n          ' createEffect(() =>'\r\n        ),\r\n        new InsertChange(sourceFile.fileName, effect.initializer!.end, end),\r\n      ];\r\n    })\r\n    .reduce((acc, inserts) => acc.concat(inserts), []);\r\n\r\n  const removes = effects\r\n    .map((effect) => effect.decorators)\r\n    .filter((decorators) => decorators)\r\n    .map((decorators) => {\r\n      const effectDecorators = decorators!.filter(isEffectDecorator);\r\n      return effectDecorators.map((decorator) => {\r\n        return new RemoveChange(\r\n          sourceFile.fileName,\r\n          decorator.expression.pos - 1, // also get the @ sign\r\n          decorator.expression.end\r\n        );\r\n      });\r\n    })\r\n    .reduce((acc, removes) => acc.concat(removes), []);\r\n\r\n  return [...inserts, ...removes];\r\n}\r\n\r\nfunction isEffectDecorator(decorator: ts.Decorator) {\r\n  return (\r\n    ts.isCallExpression(decorator.expression) &&\r\n    ts.isIdentifier(decorator.expression.expression) &&\r\n    decorator.expression.expression.text === 'Effect'\r\n  );\r\n}\r\n\r\nfunction getDispatchProperties(\r\n  host: Tree,\r\n  fileContent: string,\r\n  decorator: ts.Decorator\r\n) {\r\n  if (!decorator.expression || !ts.isCallExpression(decorator.expression)) {\r\n    return '';\r\n  }\r\n\r\n  // just copy the effect properties\r\n  const args = fileContent\r\n    .substring(\r\n      decorator.expression.arguments.pos,\r\n      decorator.expression.arguments.end\r\n    )\r\n    .trim();\r\n  return args;\r\n}\r\n\r\nexport default function (): Rule {\r\n  return chain([migrateToCreators()]);\r\n}\r\n"]}